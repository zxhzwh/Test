  
      1 rem 布局原理
rem作用于非根元素时，相对于根元素字体大小；rem作用于根元素字体大小时，相对于其出初始字体大小
其实rem布局的本质是等比缩放，一般是基于宽度
 ongoing   rem取值分为两种情况，设置在根元素时和非根元素时

/* 作用于根元素，相对于原始大小（16px），所以html的font-size为32px*/
html {font-size: 2rem}
 
/* 作用于非根元素，相对于根元素字体大小，所以为64px */
p {font-size: 2rem}

document.documentElement.style.fontSize = document.documentElement.clientWidth / 100 + 'px';

2 react 虚拟dom原理
react 在内存中生成维护一个跟真实DOM一样的虚拟DOM 树，在改动完组件后，会再生成一个新得DOM，react 会把新虚拟DOM 跟原虚拟DOM 进行比对，找出两个DOM 不同的地方diff ，然后把diff放到队列里面，然后批量更新diff 到真实DOM 上

优点：最终真实DOM 就只更新了diff 部分，提高了渲染速度

缺点：首次渲染DOM 时候由于多了一层虚拟DOM 计算，就比html 渲染慢

在React中，有一个render函数来将虚拟DOM树，并且，
React中有state转移的过程，所以每次state有变化之后，
就会触发render函数，重新构造一个虚拟DOM树。对比新旧
虚拟DOM树的差别，记录下差异，然后只针对差异部分对应的
真实DOM进行操作。

替换节点；
修改属性；
对文本内容修改
移动、删除、增加节点；

DOM的本质是什么：浏览器中的概念，用JS对象表示页面上的元素并提供操作DOM对象的API；
什么是React中的虚拟DOM：框架中的概念，是程序员用JS对象模拟页面上的DOM和DOM嵌套；
为什么要实现虚拟 DOM（虚拟DOM的目的）：为了实现页面中DOM元素的高效更新；

        3 redux搭建和使用
 搭建   我一般都会创建3个文件夹。  
 action 里面我会定义方法。 这个方法用来触发 reducers里面的处理逻辑。
 因为方法里面 会返回两个字段，一个type   用来表示一个字符串，还有一个data，就是调用action 里面的方法时传递的参数。

 reducer 里面定义store里面的数据和处理逻辑。
处理逻辑通常使用  switch   case 来选择对应的action传递过来的type 类型进行处理

 store  里面会导出 reducer  封装好的数据

使用数据：
 在 index.js 里面使用 provider 这个组件，将根组件和我们引入的store 联系起来。这样根组件中的所有组件都可以使用 reducer
 在具体的某个组件中，引入 connect 方法，该方法用来将 mapStateToProps  mapDispatchToProps 和当前组件关联起来
 mapStateToProps 用来引入数据（store）        mapDispatchToProps 用来引入 action里面的方法
使用this.props.store的名称  来获取redux里面的数据
使用this.props.actions的名称  来获取action里面的方法 

       4 什么是跨域
跨域的安全限制都是对浏览器端来说的，服务器端是不存在跨域安全限制的。浏览器的同源策略限制从一个源加载的文档或脚本与来自另一个源的资源进行交互。所谓同源即：协议、域名、端口号都相同，否则就是不同源的。

 浏览器有同源策略：不同的ip地址，不同的端口号，不同的网址不同源，不同源就不能发送ajax请求。如果请求就是跨域请求
  (比如百度的接口     在百度的服务器上，不同ip 就是跨域请求)

跨域的解决：
1    服务器端设置可跨域
      本地浏览器设置可跨域    （谷歌跨域插件，使用lantern，加载cors拓展程序）

2    jsonp 跨域
  就是利用script的src属性 的可跨域性。   请求服务端的返回的数据，返回的数据中   就是一个函数的调用，并把数据作为
 参数传进来。
在客户端，创建一个，返回数据的函数，这样  返回的函数就能够调用成功。 里面的参数就是我们要的数据

       5 什么是jsonp
jsonp是使用方法回调的原理
就是利用script的src属性 的可跨域性。   请求服务端的返回的数据，返回的数据中   就是一个函数的调用，并把数据作为
 参数传进来。
在客户端，创建一个，返回数据的函数，这样  返回的函数就能够调用成功。 里面的参数就是我们要的数据

ajax请求受同源策略影响，不允许进行跨域请求，而script标签src属性中的链接却可以访问跨域的js脚本，利用这个特性，服务端不再返回JSON格式的数据，而是返回一段调用某个函数的js代码，在src中进行了调用，这样实现了跨域。

jsonp 是一种非正式传输协议，该协议的一个要点就是允许用户传递一个callback 或者开始就定义一个回调方法，参数给服务端，然后服务端返回数据时会将这个callback 参数作为函数名来包裹住 JSON  数据，这样客户端就可以随意定制自己的函数来自动处理返回数据了。

       6 es6 promise 
所谓Promise对象，就是代表了未来某个将要发生的事件（通常是一个异步操作）。
它的好处在于，有了Promise对象，就可以将异步操作以同步操作的流程表达出来。
Promise的状态一单改变，将不可修改

Promise是异步编程的一种解决方案，它有三种状态，分别是pending-进行中、resolved-已完成、rejected-已失败
当Promise的状态由pending转变为resolved或rejected时，会执行相应的方法，并且状态一旦改变，就无法再次改变状态
声明一个promise对象时
.then()方法使Promise原型链上的方法，它包含两个参数方法，分别是已成功resolved的回调和已失败rejected的回调

.catch()的作用是捕获Promise的错误，与then()的rejected回调作用几乎一致。但是由于Promise的抛错具有冒泡性质，能够不断传递，这样就能够在下一个catch()中统一处理这些错误。同时catch()也能够捕获then()中抛出的错误，所以建议不要使用then()的rejected回调，而是统一使用catch()来处理
同样，catch()中也可以抛出错误，由于抛出的错误会在下一个catch中被捕获处理，因此可以再添加catch()

       7 es6 的继承
主要是class继承
和其他面向对象语言一样，class用extends实现继承。
(1)子类没constructor时
     子类American继承父类Person，子类没用定义constrcutor,则默认添加一个，并且在constrcutor中调用super函数,相当于调用父类的构造函数。调     用super函数是为了在子类中获得父类的this，调用之后this指向子类。也就是父类.prototype.constructor.call(this).
(2)子类有constructor
     子类必须在constructor方法中调用super方法，否则new实例时会报错。因为子类没有自己的this对象，而是继承父类的this对象。如果不调用super函数，子类就得不到this对象。super()作为父类的构造函数，只能出现在子类的constructor()中；但是super指向父类的原型对象，可以调用父类的属性和方法

       8 es6 还有哪些拓展
let和const
1.    let不像var那样，会发生“变量提升”现象。
2.    所声明的变量，只在let命令所在的代码块内有效。
3.    let声明的变量不会挂到在window上。
4.    let不能重复声明。

const
1.   一旦声明，常量的值不能改变  通常大写声明
2.   不像var那样，会发生“变量提升”现象。
3.   声明的变量不会挂到在window上。


数组的解构赋值
      含义：从数组和对象中提取值，对变量进行赋值，这就被成为解构。

        1. 数组的解构赋值：从数组中提取值，按照对应位置，对变量赋值。
        2.解构赋值允许指定默认值。  var  [foo=true]=[]
        3.对象的解构赋值：而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。
        4.对象的解构也可以指定默认值。   var {x=3}={}；

字符串模板（超级字符串）
      它可以当做普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量。

字符串新增的方法（api）
     includes()：返回布尔值，表示是否找到了参数字符串。
     startsWith()：返回布尔值，表示参数字符串是否在源字符串的头部。
     endsWith()：返回布尔值，表示参数字符串是否在源字符串的尾部。
     repeat()返回一个新字符串，表示将原字符串重复n次。

数组新增的方法
     Array.from()用于将两类对象转为真正的数组。
     Array.of()方法用于将一组值，转换为数组。
     数组实例的find()用于找出第一个符合条件的数组元素。
     数组实例的findIndex()返回第一个符合条件的数组元素的位置，如果所有元素都不符合条件，则返回-1。
     fill()使用给定值，填充一个数组。

对象的扩展
对象的简洁表示法    
     1.  属性名和属性值相同  可以 {x,y} 等同于 {x:x,y:y}
     2. 在对象的方法可以省略  function

Object.is()用来比较两个值是否严格相等。  Object.is(+0, -0) // false       Object.is(NaN, NaN) // true
Object.assign方法用来将源对象（source）的所有可枚举属性，复制到目标对象（target）。
      注意，如果目标对象与源对象有同名属性，或多个源对象有同名属性，则后面的属性会覆盖前面的属性。

Symbol
      ES6引入了一种新的原始数据类型Symbol，表示独一无二的ID。它通过Symbol函数生成。

ES6允许使用“箭头”（=>）定义函数
     1. 函数体内的this对象，绑定定义时所在的对象，而不是使用时所在的对象。 （上一层环境）
     2. 不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。
     3. 不可以使用arguments对象，该对象在函数体内不存在。

Set
    ES6提供了新的数据结构Set。它类似于数组，但是成员的值都是唯一的，没有重复的值。
    
Set数据结构方法
    add(value)：添加某个值，返回Set结构本身。
    delete(value)：删除某个值，返回一个布尔值，表示删除是否成功。
    has(value)：返回一个布尔值，表示该值是否为Set的成员。
    clear()：清除所有成员，没有返回值。


map
    它类似于对象，也是键值对的集合，但是“键”的范围不限于字符串，各种类型的值（包括对象）都可以当作键。
  map的方法
     size：返回成员总数。
     set(key, value)：设置key所对应的键值，然后返回整个Map结构。如果key已经有值，则键值会被更新，否则就新生成该键。
     get(key)：读取key对应的键值，如果找不到key，返回undefined。
     has(key)：返回一个布尔值，表示某个键是否在Map数据结构中。
     delete(key)：删除某个键，返回true。如果删除失败，返回false。
    clear()：清除所有成员，没有返回值。

       9 es5的继承 
构造函数、原型和实例的关系：每一个构造函数都有一个原型对象，每一个原型对象都有一个指向构造函数的指针，而每一个实例都包含一个指向原型对象的内部指针
 原型链实现继承: 利用原型让一个引用类型继承另一个引用类型的属性和方法，即让原型对象等于另一个类型的实例
 借用构造函数:在子类型构造函数的内部调用超类型构造函数，通过使用apply()和call()方法可以在将来新创建的对象上执行构造函数
组合继承:将原型链和借用构造函数技术组合到一起。使用原型链实现对原型属性和方法的继承，用借用构造函数模式实现对实例属性的继承.
原型式继承:不用严格意义上的构造函数，借助原型可以根据已有的对象创建新对象，还不必因此创建自定义类型
寄生式继承:寄生式继承是与原型式继承紧密相关的一种思路，它创造一个仅用于封装继承过程的函数，在函数内部以某种方式增强对象，最后再返回对象。
寄生组合式继承:就是使用寄生式继承来继承超类型的原型，然后再将结果指定给子类型的原型

      10 vue双向数据绑定原理
VUE实现双向数据绑定的原理就是利用了 Object.defineProperty() 这个方法
重新定义了对象获取属性值(get)和设置属性值(set)的操作来实现的。

      11 vuex的理解
vuex 就是数据状态管理。    多个组件之间共享数据。
Vuex采用和Redux类似的单向数据流的方式来管理数据。用户界面负责触发动作（Action)进而改变对应状态（State），从而反映到视图（View）上。
创建vuex  步骤
 1. 创建一个store文件夹   里面创建index.js
 2. 在main.js  里面引入   在vue实例中   注册
 3. 在组件中 $store.state.数据属性名
 vuex 结合本地存储
      使用  vuex-persist    
      步骤：
     1. 在vuex中导入,   
     2. 创建VuePersist  声明    存储方式
     3. 在插件中声明   plugins:[vuexLocal.plugin]
 
 modules:作用    引入一个外部的 store     把每个功能的数据，集中写在 自己的  store（index.js）里面，
 更容易管理，更容易协作开发。

    actions:  和mutations  类似。里面可以含有异步操作, 最后还是要把数据的改变提交给 mutations。   使用dispatch提交
    
    mutations:  用来改变state里面的数据的方式。  必须是同步操作。使用 commit 提交

    getters:   相当于计算属性，可以根据state里面的数据变化   获得新的计算结果

    state:     数据的声明    
 
    plugins:    使用插件

      12 计算属性和watch的区别

computed是根据页面发生变化而变化,他是用来计算的
watch属性是监听页面特定某个状态的变
watch   不要滥用，消耗性能。同样可以使用计算属性代替，就使用计算属性代替。
计算属性是基于它们的依赖进行缓存的。 性能高。

      13 路由导航守卫（路由钩子）
所谓vue路由导航守卫，也就是我们常说的声明周期钩子函数。
vue-router全局有三个守卫：

router.beforeEach 全局前置守卫 进入路由之前
router.beforeResolve 全局解析守卫(2.5.0+) 在beforeRouteEnter调用之后调用
router.afterEach 全局后置钩子 进入路由之后

组件内路由守卫
    beforeRouteEnter       因为当守卫执行前，组件实例还没被创建，不能访问this 
    beforeRouteUpdate   在嵌套路由中   比如 /home/life   /home/news 这种路由切换就是路由的更新
    beforeRouteLeave      导航离开该组件的对应路由时调用  可以访问this

      14 原型和原型链
原型是JavaScript中一个比较难理解的概念，原型相关的属性也比较多，对象有”prototype”属性，函数对象有”prototype”属性，原型对象有”constructor”属性。
原型也是一个对象，通过原型可以实现对象的属性继承
在JavaScript中，每个函数 都有一个prototype属性，当一个函数被用作构造函数来创建实例时，这个函数的prototype属性值会被作为原型赋值给所有对象实例,也就是说，所有实例的原型引用的是函数的prototype属性

原型链
因为每个对象和原型都有原型，对象的原型指向原型对象，
 而父的原型又指向父的父，这种原型层层连接起来的就构成了原型链。

      15 html5 和 css3 新特性
https://www.cnblogs.com/star91/p/5659134.html
